"""
Django settings for YourbitGold project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import environ
from decouple import config

from celery.schedules import crontab



env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = env("ALLOWED_HOSTS", "").split(",")

CSRF_TRUSTED_ORIGINS = env("CSRF_TRUSTED_ORIGINS", "").split(",")

X_FRAME_OPTIONS = 'SAMEORIGIN'
# Application definition

INSTALLED_APPS = [
    #Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',  

    #YB Apps
    'yb_accounts.apps.YbAccountsConfig',  
    'yb_api.apps.YbApiConfig',
    'yb_bits.apps.YbBitsConfig',
    'yb_customize.apps.YbCustomizeConfig',
    'yb_extensions.apps.YbExtensionsConfig',
    'yb_developer.apps.YbDeveloperConfig',
    'yb_profile.apps.YbProfileConfig',
    'yb_messages.apps.YbMessagesConfig',
    'yb_notify.apps.YbNotifyConfig',
    'yb_store.apps.YbStoreConfig',
    'yb_rewards.apps.YbRewardsConfig',
    'yb_search.apps.YbSearchConfig',
    'yb_settings.apps.YbSettingsConfig',
    'yb_support.apps.YbSupportConfig',
    'yb_systems.apps.YbSystemsConfig',
    'yb_video.apps.YbVideoConfig',
    'yb_photo.apps.YbPhotoConfig',

    #Third Party Apps
    'channels',
    'storages',
    'stripe',
    'imagekit',
    'rest_framework',
    'webpush',
    'celery',
    "rest_framework_api_key",
    
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'YourbitGold.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'yb_profile.context_processors.Customization',
            ],
        },
    },
]

AUTH_USER_MODEL = 'yb_accounts.Account'

WSGI_APPLICATION = 'YourbitGold.wsgi.application'
ASGI_APPLICATION = "YourbitGold.asgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),  # If the PostgreSQL server is on the same machine
        'PORT': env('DB_PORT'),  # Leave empty for the default PostgreSQL port (5432)
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


AWS_S3_ENDPOINT_URL = f'https://{env("BUCKET_REGION")}.linodeobjects.com'
AWS_ACCESS_KEY_ID = env('BUCKET_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = env('BUCKET_SECRET_KEY')
AWS_S3_REGION_NAME = env('BUCKET_REGION')
AWS_S3_USE_SSL = True
AWS_STORAGE_BUCKET_NAME = env('BUCKET_NAME')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_S3_ENDPOINT_URL}'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # where static files are collected

# Enable WhiteNoise compression and file versioning (recommended in production)
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = '/media/'

#STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_RATES': {
        'user': '5000/day',
        'anon': '1000/day'
    }
}

#SMTP Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# settings.py


# Celery Configuration Options
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# CELERY_BEAT_SCHEDULE = {
#     'delete_expired_friend_requests_daily': {
#         'task': 'yb_profile.tasks.delete_expired_friend_requests',
#         'schedule': crontab(hour=0, minute=0),  # Runs daily at midnight
#     },
# }

WEBPUSH_SETTINGS = {
    "VAPID_PUBLIC_KEY": env('VAPID_PUBLIC_KEY'),
    "VAPID_PRIVATE_KEY":env('VAPID_PRIVATE_KEY'),
    "VAPID_ADMIN_EMAIL": env('VAPID_ADMIN_EMAIL')
}

RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY')

#CloudFlare Stream
CLOUDFLARE_STREAM_API_KEY = env('CLOUDFLARE_STREAM_API_KEY')
CLOUDFLARE_STREAM_ACCOUNT_ID = env('CLOUDFLARE_STREAM_ACCOUNT_ID')
CLOUDFLARE_IMAGES_API_KEY = env('CLOUDFLARE_IMAGES_API_KEY')
CLOUDFLARE_ACCOUNT_HASH = env('CLOUDFLARE_ACCOUNT_HASH')
TURNSTILE_SECRET_KEY = env('TURNSTILE_SECRET_KEY')
IMAGE_BASE_URL = env('IMAGE_BASE_URL')

MUX_TOKEN_ID = env('MUX_VIDEO_TOKEN')
MUX_TOKEN_SECRET = env('MUX_VIDEO_SECRET')
MUX_SIGNING_KEY = env('MUX_SIGNING_KEY')
MUX_PRIVATE_KEY = env('MUX_PRIVATE_KEY')

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # InMemory for local testing
        # Uncomment below and use Redis for production
        # "BACKEND": "channels_redis.core.RedisChannelLayer",
        # "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
    },
}
